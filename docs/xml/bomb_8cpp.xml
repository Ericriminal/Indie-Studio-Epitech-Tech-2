<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="bomb_8cpp" kind="file" language="C++">
    <compoundname>bomb.cpp</compoundname>
    <includes refid="bomb_8hpp" local="yes">bomb.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/joris/Projects/Epitech/tek_2/OOP/OOP_indie_studio_2019/src/Game/bomb.cpp</label>
        <link refid="bomb_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Wall.hpp</label>
        <link refid="Wall_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>map.hpp</label>
        <link refid="map_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="11">
        <label>Music.hpp</label>
        <link refid="Music_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bomb.hpp</label>
        <link refid="bomb_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>random</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>irrlicht.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2020</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>bomb.cpp</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>bomb</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bomb.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">bombHandler::bombHandler(irr::scene::ISceneManager<sp/>*smgr,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::video::IVideoDriver<sp/>*driver,<sp/>irr::ITimer<sp/>*clock,<sp/><ref refid="classMap" kindref="compound">Map</ref><sp/>*map,<sp/><ref refid="classMusic" kindref="compound">Music</ref><sp/>*music)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;map<sp/>=<sp/>map;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;smgr<sp/>=<sp/>smgr;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;driver<sp/>=<sp/>driver;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombMesh<sp/>=<sp/>this-&gt;smgr-&gt;getMesh(</highlight><highlight class="stringliteral">&quot;../ressources/images/Bomb.obj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pause<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;music<sp/>=<sp/>music;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;clock<sp/>=<sp/>clock;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;clock-&gt;setTime(0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;clock-&gt;start();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>gameMap<sp/>=<sp/>map-&gt;<ref refid="classMap_1ab874d807dc2b01d6ff304ac694f93760" kindref="member">getMap</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>gameMap.size();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mapEffectZone.push_back({});</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>gameMap[y].size();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mapEffectZone[y].push_back(0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">bombHandler::~bombHandler()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombHandler::bombRadiusVertical(std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>actualMap,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incrementor,<sp/>std::vector&lt;int&gt;<sp/>*wallExplosedTmp)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forceCount<sp/>=<sp/>0;<sp/>forceCount<sp/>&lt;<sp/>force;<sp/>forceCount++)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualMap[startPos<sp/>+<sp/>incrementor][this-&gt;bombPos.back().front()]<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(actualMap[startPos<sp/>+<sp/>incrementor][this-&gt;bombPos.back().front()]<sp/>&gt;=<sp/>6</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>actualMap[startPos<sp/>+<sp/>incrementor][this-&gt;bombPos.back().front()]<sp/>&lt;=<sp/>8))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>+=<sp/>incrementor;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualMap[startPos<sp/>+<sp/>incrementor][this-&gt;bombPos.back().front()]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallExplosedTmp-&gt;push_back(this-&gt;bombPos.back().front());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallExplosedTmp-&gt;push_back(startPos<sp/>+<sp/>incrementor);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>+=<sp/>incrementor;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceCount<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startPos;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombHandler::bombRadiusHorizontal(std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>actualMap,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incrementor,<sp/>std::vector&lt;int&gt;<sp/>*wallExplosedTmp)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forceCount<sp/>=<sp/>0;<sp/>forceCount<sp/>&lt;<sp/>force;<sp/>forceCount++)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualMap[this-&gt;bombPos.back().back()][startPos<sp/>+<sp/>incrementor]<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(actualMap[this-&gt;bombPos.back().back()][startPos<sp/>+<sp/>incrementor]<sp/>&gt;=<sp/>6</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>actualMap[this-&gt;bombPos.back().back()][startPos<sp/>+<sp/>incrementor]<sp/>&lt;=<sp/>8))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>+=<sp/>incrementor;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualMap[this-&gt;bombPos.back().back()][startPos<sp/>+<sp/>incrementor]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallExplosedTmp-&gt;push_back(startPos<sp/>+<sp/>incrementor);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallExplosedTmp-&gt;push_back(this-&gt;bombPos.back().back());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>+=<sp/>incrementor;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceCount<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startPos;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombHandler::getBombRadius(std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>actualMap,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force,<sp/>std::vector&lt;int&gt;<sp/>*allWallDestroyed)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(direction)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombPos.back().back();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombRadiusVertical(actualMap,<sp/>force,<sp/>startPos,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>allWallDestroyed);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombPos.back().back();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombRadiusVertical(actualMap,<sp/>force,<sp/>startPos,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>allWallDestroyed);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombPos.back().front();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombRadiusHorizontal(actualMap,<sp/>force,<sp/>startPos,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>allWallDestroyed);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3<sp/>:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombPos.back().front();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startPos<sp/>=<sp/>this-&gt;bombRadiusHorizontal(actualMap,<sp/>force,<sp/>startPos,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>allWallDestroyed);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startPos;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::setDangerZone(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>actualMap<sp/>=<sp/>map-&gt;<ref refid="classMap_1ab874d807dc2b01d6ff304ac694f93760" kindref="member">getMap</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>allWallDestroyed;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>dangerZone;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(1);<sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>danger<sp/>of<sp/>the<sp/>bomb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;bombPos.back().front());<sp/></highlight><highlight class="comment">//<sp/>top<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;getBombRadius(actualMap,<sp/>0,<sp/>force,<sp/>&amp;allWallDestroyed));<sp/></highlight><highlight class="comment">//<sp/>top<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;bombPos.back().front());<sp/></highlight><highlight class="comment">//<sp/>down<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;getBombRadius(actualMap,<sp/>1,<sp/>force,<sp/>&amp;allWallDestroyed));<sp/></highlight><highlight class="comment">//<sp/>down<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;getBombRadius(actualMap,<sp/>2,<sp/>force,<sp/>&amp;allWallDestroyed));<sp/></highlight><highlight class="comment">//<sp/>left<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;bombPos.back().back());<sp/></highlight><highlight class="comment">//<sp/>left<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;getBombRadius(actualMap,<sp/>3,<sp/>force,<sp/>&amp;allWallDestroyed));<sp/></highlight><highlight class="comment">//<sp/>right<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>dangerZone.push_back(this-&gt;bombPos.back().back());<sp/></highlight><highlight class="comment">//<sp/>right<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;wallExplosed.push_back(allWallDestroyed);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone.push_back(dangerZone);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbombHandler_1a1bf6bb843941ce190044c2560e8c4b98" kindref="member">bombHandler::addBomb</ref>(std::vector&lt;int&gt;<sp/>actualBomb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IAnimatedMeshSceneNode<sp/>*animModel<sp/>=<sp/>this-&gt;smgr-&gt;addAnimatedMeshSceneNode(this-&gt;bombMesh);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>animModel-&gt;setMaterialTexture(0,<sp/>driver-&gt;getTexture(</highlight><highlight class="stringliteral">&quot;../ressources/images/texture.png&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>animModel-&gt;setPosition(irr::core::vector3df((20<sp/>*<sp/>actualBomb[0]),<sp/>0,<sp/>(20<sp/>*<sp/>actualBomb[1])));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>animModel-&gt;setScale(irr::core::vector3df(1.f,1.f,1.f));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>animModel-&gt;setMaterialFlag(irr::video::EMF_LIGHTING,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>animModel-&gt;setMaterialFlag(irr::video::EMF_NORMALIZE_NORMALS,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombMeshSceneNode.push_back(animModel);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombPos.push_back({actualBomb.back(),<sp/>actualBomb.front()});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombStatus.push_back(BOMB_STATUS::EXPLODING);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setDangerZone(force);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;remainingTime.push_back((this-&gt;clock-&gt;getTime()<sp/>+<sp/>3000)<sp/>%<sp/>100000);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::setBombExplosion(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombCounter)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>actualWallDestroyed<sp/>=<sp/>this-&gt;wallExplosed[bombCounter];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wallX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wallY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;music-&gt;playSound(SOUND::EXPLOSION);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(actualWallDestroyed.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallX<sp/>=<sp/>actualWallDestroyed.back();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualWallDestroyed.pop_back();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallY<sp/>=<sp/>actualWallDestroyed.back();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualWallDestroyed.pop_back();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;map-&gt;<ref refid="classMap_1ac83f759ed24e6d66e85b7fc609cc5f42" kindref="member">removeWall</ref>(wallX,<sp/>wallY);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone[bombCounter].front()<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::addParticles(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombCounter)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lengthExplosionY<sp/>=<sp/>this-&gt;bombEffectZone[bombCounter][4]<sp/>-<sp/>this-&gt;bombEffectZone[bombCounter][2];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lengthExplosionX<sp/>=<sp/>this-&gt;bombEffectZone[bombCounter][7]<sp/>-<sp/>this-&gt;bombEffectZone[bombCounter][5];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleSystemSceneNode*<sp/>horizontalParticles<sp/>=</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;smgr-&gt;addParticleSystemSceneNode(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleEmitter*<sp/>horizontalEm<sp/>=<sp/>horizontalParticles-&gt;createBoxEmitter(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::aabbox3d&lt;irr::f32&gt;(-5,<sp/>0,<sp/>-5<sp/><sp/>+<sp/>(-10<sp/>*<sp/>lengthExplosionX),<sp/>5,<sp/>1,<sp/>5),<sp/></highlight><highlight class="comment">//<sp/>emitter<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::vector3df(0.0f,<sp/>0.06f,<sp/>0.0f),<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>80<sp/>*<sp/>lengthExplosionX,<sp/>100<sp/>*<sp/>lengthExplosionX,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::video::SColor(0,255,255,255),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>darkest<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::video::SColor(0,255,255,255),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brightest<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>500,600,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>and<sp/>max<sp/>age,<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::dimension2df(10.f,10.f),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::dimension2df(11.f,11.f));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setEmitter(horizontalEm);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>grabs<sp/>the<sp/>emitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalEm-&gt;drop();<sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>drop<sp/>it<sp/>here<sp/>without<sp/>deleting<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleAffector*<sp/>horizontalAff<sp/>=<sp/>horizontalParticles-&gt;createFadeOutParticleAffector();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;addAffector(horizontalAff);<sp/></highlight><highlight class="comment">//<sp/>same<sp/>goes<sp/>for<sp/>the<sp/>affector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalAff-&gt;drop();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setPosition(irr::core::vector3df(20<sp/>*<sp/>(this-&gt;bombEffectZone[bombCounter][8]),0,20<sp/>*<sp/>((this-&gt;bombEffectZone[bombCounter][7]))));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setScale(irr::core::vector3df(2,2,2));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setMaterialFlag(irr::video::EMF_LIGHTING,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setMaterialFlag(irr::video::EMF_ZWRITE_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setMaterialTexture(0,<sp/>driver-&gt;getTexture(</highlight><highlight class="stringliteral">&quot;../ressources/images/fireball.bmp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontalParticles-&gt;setMaterialType(irr::video::EMT_TRANSPARENT_ADD_COLOR);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleSystemSceneNode*<sp/>verticalParticles<sp/>=</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;smgr-&gt;addParticleSystemSceneNode(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleEmitter*<sp/>verticalEm<sp/>=<sp/>verticalParticles-&gt;createBoxEmitter(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::aabbox3d&lt;irr::f32&gt;(-5<sp/>+<sp/>(-10<sp/>*<sp/>lengthExplosionY),<sp/>0,<sp/>-5,<sp/>5,<sp/>1,<sp/>5),<sp/></highlight><highlight class="comment">//<sp/>emitter<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::vector3df(0.0f,0.06f,0.0f),<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>80<sp/>*<sp/>lengthExplosionY,100<sp/>*<sp/>lengthExplosionY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::video::SColor(0,255,255,255),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>darkest<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::video::SColor(0,255,255,255),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brightest<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>500,600,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>and<sp/>max<sp/>age,<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::dimension2df(10.f,10.f),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irr::core::dimension2df(11.f,11.f));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setEmitter(verticalEm);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>grabs<sp/>the<sp/>emitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalEm-&gt;drop();<sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>drop<sp/>it<sp/>here<sp/>without<sp/>deleting<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::scene::IParticleAffector*<sp/>veritcalAff<sp/>=<sp/>verticalParticles-&gt;createFadeOutParticleAffector();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;addAffector(veritcalAff);<sp/></highlight><highlight class="comment">//<sp/>same<sp/>goes<sp/>for<sp/>the<sp/>affector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>veritcalAff-&gt;drop();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setPosition(irr::core::vector3df(20<sp/>*<sp/>(this-&gt;bombEffectZone[bombCounter][4]),0,20<sp/>*<sp/>((this-&gt;bombEffectZone[bombCounter][3]))));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setScale(irr::core::vector3df(2,2,2));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setMaterialFlag(irr::video::EMF_LIGHTING,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setMaterialFlag(irr::video::EMF_ZWRITE_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setMaterialTexture(0,<sp/>driver-&gt;getTexture(</highlight><highlight class="stringliteral">&quot;../ressources/images/fireball.bmp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>verticalParticles-&gt;setMaterialType(irr::video::EMT_TRANSPARENT_ADD_COLOR);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bombParticles.push_back(std::vector&lt;irr::scene::IParticleSystemSceneNode<sp/>*&gt;<sp/>{horizontalParticles,<sp/>verticalParticles});</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::removeParticles()</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::checkWaitTime(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombCounter,<sp/>irr::u32<sp/>actualTime)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOnRightTiming<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualTime<sp/>&gt;<sp/>97000<sp/>&amp;&amp;<sp/>this-&gt;remainingTime[bombCounter]<sp/>&lt;<sp/>3000)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOnRightTiming<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;bombStatus[bombCounter]<sp/>==<sp/>BOMB_STATUS::NONE)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOnRightTiming<sp/>&amp;&amp;<sp/>this-&gt;bombStatus[bombCounter]<sp/>==<sp/>BOMB_STATUS::EXPLODING</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>actualTime<sp/>&gt;<sp/>this-&gt;remainingTime[bombCounter])<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setBombExplosion(bombCounter);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;addParticles(bombCounter);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombMeshSceneNode[bombCounter]-&gt;remove();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;remainingTime[bombCounter]<sp/>=<sp/>(this-&gt;clock-&gt;getTime()<sp/>+<sp/>1000)<sp/>%<sp/>100000;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombStatus[bombCounter]<sp/>=<sp/>BOMB_STATUS::EXPLODED;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;bombStatus[bombCounter]<sp/>==<sp/>BOMB_STATUS::EXPLODED</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>actualTime<sp/>&gt;<sp/>this-&gt;remainingTime[bombCounter])<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombStatus[bombCounter]<sp/>=<sp/>BOMB_STATUS::NONE;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::addVerticalDangerZone(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dangerType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>topX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>topY,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>downY)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>topY<sp/>&lt;=<sp/>downY;<sp/>topY++)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mapEffectZone[topY][topX]<sp/>=<sp/>dangerType;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::addHorizontalDangerZone(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dangerType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftY,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightX)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>leftX<sp/>&lt;=<sp/>rightX;<sp/>leftX++)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mapEffectZone[leftY][leftX]<sp/>=<sp/>dangerType;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::updateDangerZone()</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalBombEffectZone<sp/>=<sp/>this-&gt;bombEffectZone.size();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>this-&gt;mapEffectZone.size();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>this-&gt;mapEffectZone[y].size();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mapEffectZone[y][x]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;<sp/>count<sp/>&lt;<sp/>totalBombEffectZone;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;addVerticalDangerZone(this-&gt;bombEffectZone[count][0],</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone[count][1],<sp/>this-&gt;bombEffectZone[count][2],</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone[count][4]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;addHorizontalDangerZone(this-&gt;bombEffectZone[count][0],</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone[count][5],<sp/>this-&gt;bombEffectZone[count][6],</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone[count][7]);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bombHandler::removeOldPointer()</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;<sp/>count<sp/>&lt;<sp/>this-&gt;bombStatus.size();<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;bombStatus[count]<sp/>==<sp/>BOMB_STATUS::NONE)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombPos.erase(this-&gt;bombPos.begin());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombMeshSceneNode.erase(this-&gt;bombMeshSceneNode.begin());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;wallExplosed.erase(this-&gt;wallExplosed.begin());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombEffectZone.erase(this-&gt;bombEffectZone.begin());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;remainingTime.erase(this-&gt;remainingTime.begin());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombStatus.erase(this-&gt;bombStatus.begin());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombParticles.front().front()-&gt;remove();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombParticles.front().back()-&gt;remove();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bombParticles.erase(this-&gt;bombParticles.begin());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">std::vector&lt;std::vector&lt;int&gt;&gt;<sp/><ref refid="classbombHandler_1a7a4a3d013569397263a39fd57f5a4663" kindref="member">bombHandler::getDangerZone</ref>()</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;mapEffectZone;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbombHandler_1a65ed78824969ea583e73fd1800673b3b" kindref="member">bombHandler::SetPause</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pause)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pause<sp/>=<sp/>pause;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pause)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;clock-&gt;stop();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;clock-&gt;start();</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbombHandler_1afc7e6a87dbe540cbfb14e10f9e72aa3a" kindref="member">bombHandler::checkBomb</ref>()</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>irr::u32<sp/>actualTime<sp/>=<sp/>this-&gt;clock-&gt;getTime();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualTime<sp/>&gt;=<sp/>100000)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;clock-&gt;setTime(irr::u32(0));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualTime<sp/>=<sp/>this-&gt;clock-&gt;getTime();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bombCounter<sp/>=<sp/>0;<sp/>!pause<sp/>&amp;&amp;<sp/>bombCounter<sp/>&lt;<sp/>this-&gt;bombStatus.size();<sp/>bombCounter++)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;checkWaitTime(bombCounter,<sp/>actualTime);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;removeOldPointer();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;updateDangerZone();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this-&gt;map-&gt;dump_map(this-&gt;mapEffectZone);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/joris/Projects/Epitech/tek_2/OOP/OOP_indie_studio_2019/src/Game/bomb.cpp"/>
  </compounddef>
</doxygen>
